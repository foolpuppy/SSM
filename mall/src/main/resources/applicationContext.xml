<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd"> <!-- 开启注解扫描 -->
    <context:annotation-config/>
    <!--开启包扫描-->
    <context:component-scan base-package="top.wigon">
        <!--配置不扫描的注解包-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <!--配置扫描的注解s包-->
    </context:component-scan>
    <!-- 加载数据库设置 -->
    <context:property-placeholder location="classpath:db.properties"/>
    <!-- 开启AOP -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- 配置Druid -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 解密密码必须要配置的项 -->
        <property name="filters" value="${jdbc.filters}"/>
        <property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${jdbc.publickey}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->

        <property name="validationQuery" value="SELECT 1"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20"/>
    </bean>
    <!--配置DRUID显示可执行SQL-->
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="statementExecutableSqlLogEnable" value="true"/>
    </bean>
    <!--配置MyBatis会话工厂Bean sqlSessionFactoryBean -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--        <property name="dataSource" ref="dataSource"/>-->
        <!--        <property name="configLocation" value="classpath:mybatis-config.xml"/>-->
        <!--        <property name="mapperLocations" value="classpath*:top/wigon/mapper/**/*.xml"/>-->
        <property name="typeAliasesPackage" value="top.wigon.pojo"/>
        <!--        <property name="configLocation" value="classpath:mybatis-config.xml"/>-->
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations">
            <list>
                <value>classpath:top/wigon/mapper/*.xml</value>
            </list>
        </property>
    </bean>
    <!--mapper扫描器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="top.wigon.mapper"/>
    </bean>
    <!--配置Spring声明式事务管理-->
    <!--配置事务管理通知-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--注入连接池-->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>

